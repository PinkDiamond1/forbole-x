diff --git a/node_modules/cosmjs-types/cosmos/auth/v1beta1/auth.js b/node_modules/cosmjs-types/cosmos/auth/v1beta1/auth.js
index 0673e21..41ebbd1 100644
--- a/node_modules/cosmjs-types/cosmos/auth/v1beta1/auth.js
+++ b/node_modules/cosmjs-types/cosmos/auth/v1beta1/auth.js
@@ -8,6 +8,7 @@ exports.Params = exports.ModuleAccount = exports.BaseAccount = exports.protobufP
 const long_1 = __importDefault(require("long"));
 const minimal_1 = __importDefault(require("protobufjs/minimal"));
 const any_1 = require("../../../google/protobuf/any");
+const timestamp_1 = require("../../../google/protobuf/timestamp");
 exports.protobufPackage = "cosmos.auth.v1beta1";
 const baseBaseAccount = { address: "", accountNumber: long_1.default.UZERO, sequence: long_1.default.UZERO };
 exports.BaseAccount = {
@@ -355,4 +356,74 @@ if (minimal_1.default.util.Long !== long_1.default) {
     minimal_1.default.util.Long = long_1.default;
     minimal_1.default.configure();
 }
+
+// Desmos Profile
+  
+function fromTimestamp(t) {
+    let millis = t.seconds * 1_000
+    millis += t.nanos / 1_000_000
+    return new Date(millis)
+}
+
+const Pictures = {
+    decode(input, length) {
+        const basePictures = { profile: '', cover: '' }
+        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length
+        const message = { ...basePictures }
+        while (reader.pos < end) {
+            const tag = reader.uint32()
+            switch (tag >>> 3) {
+            case 1:
+                message.profile = reader.string()
+                break
+            case 2:
+                message.cover = reader.string()
+                break
+            default:
+                reader.skipType(tag & 7)
+                break
+            }
+        }
+        return message
+    },
+}
+
+exports.ProfileAccount = {
+    decode(input, length) {
+        const baseProfile = { dtag: '', nickname: '', bio: '' }
+        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length
+        const message = { ...baseProfile }
+        while (reader.pos < end) {
+          const tag = reader.uint32()
+          switch (tag >>> 3) {
+            case 1:
+              message.account = any_1.Any.decode(reader, reader.uint32())
+              break
+            case 2:
+              message.dtag = reader.string()
+              break
+            case 3:
+              message.nickname = reader.string()
+              break
+            case 4:
+              message.bio = reader.string()
+              break
+            case 5:
+              message.pictures = Pictures.decode(reader, reader.uint32())
+              break
+            case 6:
+              message.creationDate = fromTimestamp(
+                timestamp_1.Timestamp.decode(reader, reader.uint32())
+              )
+              break
+            default:
+              reader.skipType(tag & 7)
+              break
+          }
+        }
+        return message
+      },
+};
 //# sourceMappingURL=auth.js.map
\ No newline at end of file
diff --git a/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.d.ts b/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.d.ts
index 4a69d0d..259fb72 100644
--- a/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.d.ts
+++ b/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.d.ts
@@ -65,3 +65,20 @@ export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<inf
     [K in keyof T]?: DeepPartial<T[K]>;
 } : Partial<T>;
 export {};
+
+export interface MsgSaveProfile {
+    dtag: string
+    nickname: string
+    bio: string
+    profilePicture: string
+    coverPicture: string
+    creator: string
+  }
+
+export declare const MsgSaveProfile: {
+    encode(message: MsgSaveProfile, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSaveProfile;
+    fromJSON(object: any): MsgSaveProfile;
+    toJSON(message: MsgSaveProfile): unknown;
+    fromPartial(object: DeepPartial<MsgSaveProfile>): MsgSaveProfile;
+};
\ No newline at end of file
diff --git a/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.js b/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.js
index 017ce51..ec28dec 100644
--- a/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.js
+++ b/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.js
@@ -232,3 +232,152 @@ if (minimal_1.default.util.Long !== long_1.default) {
     minimal_1.default.configure();
 }
 //# sourceMappingURL=tx.js.map
+
+// Desmos
+const baseMsgSaveProfile = {
+    dtag: '',
+    nickname: '',
+    bio: '',
+    profilePicture: '',
+    coverPicture: '',
+    creator: '',
+  }
+exports.MsgSaveProfile = {
+    encode(message, writer = minimal_1.default.Writer.create()) {
+      if (message.dtag !== '') {
+        writer.uint32(10).string(message.dtag)
+      }
+      if (message.nickname !== '') {
+        writer.uint32(18).string(message.nickname)
+      }
+      if (message.bio !== '') {
+        writer.uint32(26).string(message.bio)
+      }
+      if (message.profilePicture !== '') {
+        writer.uint32(34).string(message.profilePicture)
+      }
+      if (message.coverPicture !== '') {
+        writer.uint32(42).string(message.coverPicture)
+      }
+      if (message.creator !== '') {
+        writer.uint32(50).string(message.creator)
+      }
+      return writer
+    },
+  
+    decode(input, length) {
+      const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
+      let end = length === undefined ? reader.len : reader.pos + length
+      const message = { ...baseMsgSaveProfile }
+      while (reader.pos < end) {
+        const tag = reader.uint32()
+        switch (tag >>> 3) {
+          case 1:
+            message.dtag = reader.string()
+            break
+          case 2:
+            message.nickname = reader.string()
+            break
+          case 3:
+            message.bio = reader.string()
+            break
+          case 4:
+            message.profilePicture = reader.string()
+            break
+          case 5:
+            message.coverPicture = reader.string()
+            break
+          case 6:
+            message.creator = reader.string()
+            break
+          default:
+            reader.skipType(tag & 7)
+            break
+        }
+      }
+      return message
+    },
+  
+    fromJSON(object) {
+      const message = { ...baseMsgSaveProfile }
+      if (object.dtag !== undefined && object.dtag !== null) {
+        message.dtag = String(object.dtag)
+      } else {
+        message.dtag = ''
+      }
+      if (object.nickname !== undefined && object.nickname !== null) {
+        message.nickname = String(object.nickname)
+      } else {
+        message.nickname = ''
+      }
+      if (object.bio !== undefined && object.bio !== null) {
+        message.bio = String(object.bio)
+      } else {
+        message.bio = ''
+      }
+      if (object.profilePicture !== undefined && object.profilePicture !== null) {
+        message.profilePicture = String(object.profilePicture)
+      } else {
+        message.profilePicture = ''
+      }
+      if (object.coverPicture !== undefined && object.coverPicture !== null) {
+        message.coverPicture = String(object.coverPicture)
+      } else {
+        message.coverPicture = ''
+      }
+      if (object.creator !== undefined && object.creator !== null) {
+        message.creator = String(object.creator)
+      } else {
+        message.creator = ''
+      }
+      return message
+    },
+  
+    toJSON(message) {
+      const obj = {}
+      message.dtag !== undefined && (obj.dtag = message.dtag)
+      message.nickname !== undefined && (obj.nickname = message.nickname)
+      message.bio !== undefined && (obj.bio = message.bio)
+      message.profilePicture !== undefined &&
+        (obj.profilePicture = message.profilePicture)
+      message.coverPicture !== undefined &&
+        (obj.coverPicture = message.coverPicture)
+      message.creator !== undefined && (obj.creator = message.creator)
+      return obj
+    },
+  
+    fromPartial(object) {
+      const message = { ...baseMsgSaveProfile }
+      if (object.dtag !== undefined && object.dtag !== null) {
+        message.dtag = object.dtag
+      } else {
+        message.dtag = ''
+      }
+      if (object.nickname !== undefined && object.nickname !== null) {
+        message.nickname = object.nickname
+      } else {
+        message.nickname = ''
+      }
+      if (object.bio !== undefined && object.bio !== null) {
+        message.bio = object.bio
+      } else {
+        message.bio = ''
+      }
+      if (object.profilePicture !== undefined && object.profilePicture !== null) {
+        message.profilePicture = object.profilePicture
+      } else {
+        message.profilePicture = ''
+      }
+      if (object.coverPicture !== undefined && object.coverPicture !== null) {
+        message.coverPicture = object.coverPicture
+      } else {
+        message.coverPicture = ''
+      }
+      if (object.creator !== undefined && object.creator !== null) {
+        message.creator = object.creator
+      } else {
+        message.creator = ''
+      }
+      return message
+    },
+  }
\ No newline at end of file
